module NullC @safe()
{
  uses interface Boot;
	uses interface MeasureWave;
	uses interface DiagMsg;
	uses interface LocalTime<TMicro>;
}
implementation
{
	// szep/01871_01007.raw
	uint8_t s1[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 15, 16, 16, 15, 14, 13, 14, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 14, 14, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 14, 13, 13, 13, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 14, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 14, 14, 13, 13, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 14, 13, 13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 13, 13, 13, 13, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 13, 13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 14, 13, 13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 14, 13, 13, 13, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 13, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 14, 13, 13, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 14, 14, 13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 14, 13, 13, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 14, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 14, 14, 13, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 14, 14, 13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 14, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 14, 13, 13, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 13, 13, 13, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 14, 13, 13, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 14, 13, 13, 13, 13, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15};

	uint8_t *choices[] = {s1};

	uint8_t index;
	uint8_t samples[480];

	task void doit() {
		uint32_t time;

		memcpy(samples, choices[0], sizeof(samples));

		atomic {
			time = call LocalTime.get();
			call MeasureWave.changeData(samples, sizeof(samples));
			time = call LocalTime.get() - time;
		}

		if( call DiagMsg.record() ){
			call DiagMsg.uint8(call MeasureWave.getPeriod());
			call DiagMsg.uint8(call MeasureWave.getPhase());
			call DiagMsg.uint32(time);
			call DiagMsg.send();
		}

		post doit();
	}

	event void Boot.booted() {
		post doit();
	}
}
